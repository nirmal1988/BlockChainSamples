{
  "_args": [
    [
      {
        "raw": "ibm-blockchain-js@1.1.2",
        "scope": null,
        "escapedName": "ibm-blockchain-js",
        "name": "ibm-blockchain-js",
        "rawSpec": "1.1.2",
        "spec": "1.1.2",
        "type": "version"
      },
      "/Users/Nirmal/Softwares/Blockchain/BlockChainSamples/AfterSalesPoC/Hyperledger/app"
    ]
  ],
  "_from": "ibm-blockchain-js@1.1.2",
  "_id": "ibm-blockchain-js@1.1.2",
  "_inCache": true,
  "_location": "/ibm-blockchain-js",
  "_nodeVersion": "0.12.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ibm-blockchain-js-1.1.2.tgz_1461619296005_0.41537719313055277"
  },
  "_npmUser": {
    "name": "dshuffma-ibm",
    "email": "dshuffma@us.ibm.com"
  },
  "_npmVersion": "2.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ibm-blockchain-js@1.1.2",
    "scope": null,
    "escapedName": "ibm-blockchain-js",
    "name": "ibm-blockchain-js",
    "rawSpec": "1.1.2",
    "spec": "1.1.2",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ibm-blockchain-js/-/ibm-blockchain-js-1.1.2.tgz",
  "_shasum": "2664cf327ed9df7d87a4d5d0b0ccefbb7a5b040f",
  "_shrinkwrap": null,
  "_spec": "ibm-blockchain-js@1.1.2",
  "_where": "/Users/Nirmal/Softwares/Blockchain/BlockChainSamples/AfterSalesPoC/Hyperledger/app",
  "author": {
    "name": "David Huffman and Ben Smith"
  },
  "bugs": {
    "url": "https://github.com/IBM-Blockchain/ibm-blockchain-js/issues"
  },
  "dependencies": {
    "adm-zip": "0.4.4",
    "async": "1.5.0"
  },
  "description": "A library for easily interacting with IBM Blockchain.",
  "devDependencies": {
    "tape": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "2664cf327ed9df7d87a4d5d0b0ccefbb7a5b040f",
    "tarball": "https://registry.npmjs.org/ibm-blockchain-js/-/ibm-blockchain-js-1.1.2.tgz"
  },
  "gitHead": "83a1a7e620488077c89a37994dbcd3ee1edd52b6",
  "homepage": "https://github.com/IBM-Blockchain/ibm-blockchain-js#readme",
  "keywords": [
    "ibm",
    "blockchain",
    "obc",
    "peer",
    "node",
    "hyperledger"
  ],
  "license": "IPL-1.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "benjsmi",
      "email": "benjsmi@us.ibm.com"
    },
    {
      "name": "dshuffma-ibm",
      "email": "dshuffma@us.ibm.com"
    }
  ],
  "name": "ibm-blockchain-js",
  "optionalDependencies": {},
  "readme": "*Are you looking for the Marbles app demo?  Thatâ€™s not here, head to the [marbles example](https://github.com/IBM-Blockchain/marbles)* \r\n\r\n# ibm-blockchain-js\r\nThis is a Node.js library for easier interaction IBM Blockchain chaincode. \r\nAll documentation is on this page.\r\n\r\nTable Of Contents:\r\n\r\n1. [v1.0.0 Migration!](#migrate)\r\n1. [IBC-js Function Documentation](#ibcjs)\r\n1. [Chaincode Functions](#ccfunc)\r\n1. [Object Formats](#formats)\r\n1. [Chaincode Summary File](#ccsf)\r\n1. [FAQ](#faq)\r\n\r\n***\r\n\r\n## Installation\r\n\r\n```\r\nnpm install ibm-blockchain-js\r\n```\r\n\r\n***\r\n\r\n## Usage Steps!\r\n(example code also provided below)\r\n\r\n1. Require this module\r\n1. Pass network + chaincode parameters to ibc.load(options, my_cb):\r\n1. Receive chaincode object from callback to ibc.load(). ie: my_cb(e, chaincode)\r\n1. You can now deploy your chaincode (if needed) with chaincode.deploy(func, args, null, cb)\r\n1. Use dot notation on chaincode to call any of your chaincode functions ie:\r\n\r\n```js\r\n\t\t// The functions below need to exist in your actual chaincode GoLang file(s) \r\n\t\tchaincode.query.read(['a'], cb);              //will read variable \"a\" from current chaincode state\r\n\t\tchaincode.invoke.write(['a', 'test'], cb);    //will write to variable \"a\"\r\n\t\tchaincode.invoke.remove(['a'], cb);           //will delete variable \"a\"\r\n\t\tchaincode.invoke.init_marbles([ARGS], cb);    //calls my custom chaincode function init_marbles() and passes it ARGS\r\n```\r\n\r\n## Example\r\n\r\n```js\r\n\t// Step 1 ==================================\r\n\tvar Ibc1 = require('ibm-blockchain-js');\r\n\tvar ibc = new Ibc1();\r\n\tvar chaincode = {};\r\n\r\n\t// ==================================\r\n\t// configure ibc-js sdk\r\n\t// ==================================\r\n\tvar options = \t{\r\n\t\tnetwork:{\r\n\t\t\tpeers:   [{\r\n\t\t\t\t\"api_host\": \"xxx.xxx.xxx.xxx\",\r\n\t\t\t\t\"api_port\": \"xxxxx\",\r\n\t\t\t\t\"api_port_tls\": \"xxx\",\r\n\t\t\t\t\"id\": \"xxxxxx-xxxx-xxx-xxx-xxxxxxxxxxxx_vpx\"\r\n\t\t\t}],\r\n\t\t\tusers:  [{\r\n\t\t\t\t\"enrollID\": \"user1\",\r\n\t\t\t\t\"enrollSecret\": \"xxxxxxxx\"\r\n\t\t\t}],\r\n\t\t\toptions: {\t\t\t\t\t\t\t//this is optional\r\n\t\t\t\tquiet: true, \r\n\t\t\t\ttimeout: 60000\r\n\t\t\t}\r\n\t\t},\r\n\t\tchaincode:{\r\n\t\t\tzip_url: 'https://github.com/ibm-blockchain/marbles-chaincode/archive/master.zip',\r\n\t\t\tunzip_dir: 'marbles-chaincode-master/part2_v1.0.0',\r\n\t\t\tgit_url: 'https://github.com/ibm-blockchain/marbles-chaincode/part2_v1.0.0'\r\n\t\t}\r\n\t};\r\n\t\r\n\t// Step 2 ==================================\r\n\tibc.load(options, cb_ready);\r\n\r\n\t// Step 3 ==================================\r\n\tfunction cb_ready(err, cc){\t\t\t\t\t\t\t\t//response has chaincode functions\r\n\t\tapp1.setup(ibc, cc);\r\n\t\tapp2.setup(ibc, cc);\r\n\t\r\n\t// Step 4 ==================================\r\n\t\tif(cc.details.deployed_name === \"\"){\t\t\t\t//decide if I need to deploy or not\r\n\t\t\tcc.deploy('init', ['99'], null, cb_deployed);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconsole.log('chaincode summary file indicates chaincode has been previously deployed');\r\n\t\t\tcb_deployed();\r\n\t\t}\r\n\t}\r\n\r\n\t// Step 5 ==================================\r\n\tfunction cb_deployed(err){\r\n\t\tconsole.log('sdk has deployed code and waited');\r\n\t\tchaincode.query.read(['a']);\r\n\t}\r\n```\r\n\t\r\n\t\r\n***\r\n## <a name=\"migrate\"></a>Migrating from v0.0.x to v1.x.x\r\nThe interface to your chaincode functions has changed in v1.0.0 from v0.0.13! \r\nIt is only a minor syntax change that should make it more clear to newcomers. \r\nAll invocation functions can now be found under `chaincode.invoke` and all query functions can be found under `chaincode.query`.\r\n\r\nExamples:\r\n\r\n**query changes** - name change\r\n```js\r\n\t//old code\r\n\tchaincode.read('a');\r\n\t\r\n\t//new code \r\n\tchaincode.query.read(['a']);\r\n```\r\n\r\n**invoke changes** - name change\r\n```js\r\n\t//old code\r\n\tchaincode.init_marble(args);\r\n\tchaincode.remove(args);\r\n\tchaincode.write(name, value);\r\n\t\r\n\t//new code \r\n\tchaincode.invoke.init_marble(args);\r\n\tchaincode.invoke.remove(args);\r\n\tchaincode.invoke.write(args);\r\n```\r\n\r\n**deploy changes** - added options parameter\r\n```js\r\n\t//old code\r\n\tchaincode.deploy('init', ['99'], './cc_summaries', cb_deployed);\r\n\t\r\n\t//new code \r\n\tchaincode.deploy('init', ['99'], {save_path: './cc_summaries', delay_ms: 60000}, cb_deployed);\r\n```\r\n\r\n**register changes** - added new parameter\r\n```js\r\n\t//old code\r\n\tibc.register(i, enrollId, enrollSecret, [callback]);\r\n\t\r\n\t//new code \r\n\tibc.register(i, enrollId, enrollSecret, maxRetry, [callback]);\r\n\r\n```\r\n\r\n***\r\n\r\n## <a name=\"ibcjs\"></a>IBM-Blockchain-JS Documentation\r\n### ibc.load(options, [callback])\r\nThis is a function that wraps a typical startup using a standard Bluemix IBM Blockchain network. \r\nTake a look at how this function works, especially how it uses the register() function. \r\nIf this is not applicable for your network (ie you have a custom IBM Blockchain network) you can easily create your own version of `ibc.load()` for your needs. \r\nIt will run in order:\r\n\r\n1. ibc.network(options.network.peers, options.network.options) *check out other options in ibc.network()*\r\n1. ibc.register(...) \r\n\t- It will register the first peer with the first enrollID, the 2nd peer against the 2nd enrollID and so on.\r\n\t- This function only runs if valid users are found in options.network.users. A valid user is one that contains 'type_1'.\r\n\t- Any errors in register will stop execution and run callback(err).\r\n1. ibc.load_chaincode(options.chaincode, [callback]) \r\n1. callback(err, cc) \r\n\r\nEx:\r\n\r\n```js\r\n\tvar options = \t{\r\n\t\tnetwork:{\r\n\t\t\tpeers:   [{\r\n\t\t\t\t\"api_host\": \"xxx.xxx.xxx.xxx\",\r\n\t\t\t\t\"api_port\": \"xxxxx\",\r\n\t\t\t\t\"api_port_tls\": \"xxx\",\r\n\t\t\t\t\"id\": \"xxxxxx-xxxx-xxx-xxx-xxxxxxxxxxxx_vpx\"\r\n\t\t\t}],\r\n\t\t\tusers:  [{\r\n\t\t\t\t\"enrollID\": \"user1\",\r\n\t\t\t\t\"enrollSecret\": \"xxxxxxxx\"\r\n\t\t\t}],\r\n\t\t\toptions: {            //this is optional, gets passed to ibc.network(peers, options);\r\n\t\t\t\tquiet: true, \r\n\t\t\t\ttimeout: 60000,\r\n\t\t\t\ttls: false\r\n\t\t\t}\r\n\t\t},\r\n\t\tchaincode:{\r\n\t\t\tzip_url: 'https://github.com/ibm-blockchain/marbles-chaincode/archive/master.zip', //http/https of a link to download zip\r\n\t\t\tunzip_dir: 'marbles-chaincode-master/part2_v1.0.0',                                        //name/path to folder that contains the chaincode you want to deploy (path relative to unzipped root)\r\n\t\t\tgit_url: 'https://github.com/ibm-blockchain/marbles-chaincode/part2_v1.0.0',             //git https URL. should point to the desired chaincode repo AND directory\r\n\t\t\t\r\n\t\t\tdeployed_name: null    //[optional] this is the hashed name of a deployed chaincode.  if you want to run with chaincode that is already deployed set it now, else it will be set when you deploy with the sdk\r\n\t\t}\r\n\t};\r\n\t\r\n\tibc.load(options, function(err, data){\r\n\t\t//callback here\r\n\t});\r\n```\r\n\r\n### ibc.load_chaincode(options, [callback])\r\nLoad the chaincode you want to use. \r\nIt will be downloaded and parsed. \r\nThe callback will receive (e, obj) where `e` is the error format and `obj` is the chaincode object.\r\n\"e\" is null when there are no errors.\r\nThe chaincode object will have dot notation to the functions in the your chaincode. \r\n\r\nEx:\r\n\r\n```js\r\n\tvar options = \t{\r\n\t\tzip_url: 'https://github.com/ibm-blockchain/marbles-chaincode/archive/master.zip', //http/https of a link to download zip\r\n\t\tunzip_dir: 'marbles-chaincode-master/part2_v1.0.0',                                        //name/path to folder that contains the chaincode you want to deploy (path relative to unzipped root)\r\n\t\tgit_url: 'https://github.com/ibm-blockchain/marbles-chaincode/part2_v1.0.0',             //git https URL. should point to the desired chaincode repo AND directory\r\n\t\t\r\n\t\tdeployed_name: null   //[optional] this is the hashed name of a deployed chaincode.  if you want to run with chaincode that is already deployed set it now, else it will be set when you deploy with the sdk\r\n\t};\r\n\tibc.load_chaincode(options, cb_ready);\r\n```\r\n\r\n### ibc.network(arrayPeers, [options])\r\nSet the information about the peers in the network.\r\nThis should be an array of peer objects. \r\nThe optional options parameter should be an object with the field `quiet` and/or `timeout`.\r\n- quiet = boolean - when true will print out only minimal HTTP debug information. Defaults `true`.\r\n- timeout = integer - time in ms to wait for a http response. Defaults `60000`.\r\n- tls = boolean - when `false` will use HTTP instead of HTTPS. Defaults `true`.\r\n\r\nEx:\r\n\r\n```js\r\n\tvar peers = [\r\n\t\t{\r\n\t\t\t\"api_host\": \"xxx.xxx.xxx.xxx\",\r\n\t\t\t\"api_port\": \"xxxxx\",\r\n\t\t\t\"api_port_tls\": \"xxx\",\r\n\t\t\t\"id\": \"xxxxxx-xxxx-xxx-xxx-xxxxxxxxxxxx_vpx\"\r\n\t\t}\r\n\t]\r\n\tibc.network(peers, {quiet: false, timeout: 120000});\r\n```\r\n\r\n### ibc.save(path [callback])\r\nSave the [Chaincode Summary File](#ccsf) to a path.\r\n\r\nEx:\r\n\r\n```js\r\n\tibc.save('./');\r\n```\r\n\r\n### ibc.clear([callback])\r\nClear any loaded chaincode files including the downloaded chaincode repo, and [Chaincode Summary File](#ccsf).\r\n\r\nEx:\r\n\r\n```js\r\n\tibc.clear();\r\n```\r\n\r\n### ibc.chain_stats([callback])\r\nGet statistics on the network's chain.  \r\n\r\nEx:\r\n\r\n```js\r\n\tibc.chain_stats(function(e, stats){\r\n\t\tconsole.log('got some stats', stats);\r\n\t});\r\n```\r\n\r\nExample Chain Stats:\r\n\r\n```js\r\n\t{\r\n\t\t\"height\": 10,\r\n\t\t\"currentBlockHash\": \"n7uMlNMiOSUM8s02cslTRzZQQlVfm8wKT9FtL54o0ywy6BkvPMwSzN5R1tpquvqOwFFHyLSoW44n6rkFyvAsBw==\",\r\n\t\t\"previousBlockHash\": \"OESGPzacJO2Xc+5PB2zpmYVM8XlrwnEky0L2Ghok9oK1Lr/DWoxuBo2WwBca5zzJGq0fOeRQ7aOHgCjMupfL+Q==\"\r\n\t}\r\n```\r\n\r\n### ibc.block_stats(id, [callback])\r\nGet statistics on a particular block in the chain.  \r\n\r\nEx:\r\n\r\n```js\r\n\tibc.block_stats(function(e, stats){\r\n\t\tconsole.log('got some stats', stats);\r\n\t});\r\n```\r\n\r\nExample Response:\r\n\r\n```js\r\n\t{\r\n\t\t\"transactions\": [\r\n\t\t\t{\r\n\t\t\t\t\"type\": 3,\r\n\t\t\t\t\"chaincodeID\": \"EoABNWUzNGJmNWI1MWM1MWZiYzhlMWFmOThkYThhZDg0MGM2OWFjOWM5YTg4ODVlM2U0ZDBlNjNiM2I4MDc0ZWU2NjY2OWFjOTAzNTg4MzE1YTZjOGQ4ODY4M2Y1NjM0MThlMzMwNzQ3ZmVhZmU3ZWYyMGExY2Q1NGZmNzY4NWRhMTk=\",\r\n\t\t\t\t\"payload\": \"CrABCAESgwESgAE1ZTM0YmY1YjUxYzUxZmJjOGUxYWY5OGRhOGFkODQwYzY5YWM5YzlhODg4NWUzZTRkMGU2M2IzYjgwNzRlZTY2NjY5YWM5MDM1ODgzMTVhNmM4ZDg4NjgzZjU2MzQxOGUzMzA3NDdmZWFmZTdlZjIwYTFjZDU0ZmY3Njg1ZGExORomCgtpbml0X21hcmJsZRIHcng2YXRzcBIFZ3JlZW4SAjM1EgNCb2I=\",\r\n\t\t\t\t\"uuid\": \"b3da1d08-19b8-4d8c-a116-b46defb07a7c\",\r\n\t\t\t\t\"timestamp\": {\r\n\t\t\t\t\t\"seconds\": 1453997627,\r\n\t\t\t\t\t\"nanos\": 856894462\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateHash\": \"81ci8IAOeDh0ZwFM6hE/b3SfXt4tnZFemib7sI95cOsNcYMmtRxBWRBA7qnjPOCGU6snBRsFVnAliZXUigQ03w==\",\r\n\t\t\"previousBlockHash\": \"tpjUh4sgbaUQFO8wm8S8nrm7yCrBa4rphIiujfaYAlEVfzI8IZ0mjYMf+GiOZ6CZRNWPmf+5bekmGIfr0H6zdw==\",\r\n\t\t\"nonHashData\": {\r\n\t\t\t\"localLedgerCommitTimestamp\": {\r\n\t\t\t\"seconds\": 1453997627,\r\n\t\t\t\"nanos\": 868868790\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\n### ibc.switchPeer(peerIndex)\r\nThe SDK will default to use peer[0].  This function will switch the default peer to another index.  \r\n\r\nEx:\r\n\r\n```js\r\n\tibc.switchPeer(2);\r\n```\r\n\t\r\n### ibc.register(peerIndex, enrollID, enrollsecret, maxRetry, [callback])\r\nOnly applicable on a network with security enabled. \r\n`register()` will register against peer[peerIndex] with the provided credentials.\r\nIf successful, the peer will now use this `enrollID` to perform any http requests.\r\n- peerIndex = integer - position of peer in peers array (the one you fed ibc.networks()) you want to register against.\r\n- enrollID = string - name of secure context user.\r\n- enrollSecret = string - password/secret/api key of secure context user.\r\n- maxRetry = integer - number of times to retry this call before giving up.\r\n\r\nEx:\r\n\r\n```js\r\n\tibc.register(3, 'user1', 'xxxxxx', 3, my_cb);\r\n```\r\n\r\n### ibc.monitor_blockheight(callback)\r\nThis will call your callback function whenever the block height has changed.\r\nie. whenever a new block has been written to the chain.\r\nIt will also pass you the same response as in `chain_stats()`.\r\n\r\nEx:\r\n\r\n```js\r\n\tibc.monitor_blockheight(my_callback);\r\n\tfunction my_callback(e, chainstats){\r\n\t\tconsole.log('got a new block!', chainstats);\r\n\t}\r\n```\r\n\r\n### ibc.get_transaction(udid, [callback])\r\nGet information about a particular transaction ID.\r\n\r\nEx:\r\n\r\n```js\r\n\tibc.get_transaction('d30a1445-185f-4853-b4d6-ee7b4dfa5534', function(err, data){\r\n\t\tconsole.log('found trans', err, data);\r\n\t});\r\n```\r\n\r\n***\r\n***\r\n\r\n##<a name=\"ccfunc\"></a>Chaincode Functions\r\n- Chaincode functions are dependent on actually be found inside your Go chaincode\r\n- My advice is to build your chaincode off of the Marble Application one.  This way you get the basic CRUD functions below:\r\n\r\n### chaincode.deploy(func, args, [options], [enrollID], [callback])\r\nDeploy the chaincode. \r\nCall GoLang function named 'func' and feed it 'args'.\r\nUsually \"args\" is an array of strings.\r\nThe `enrollID` parameter should be the desired secure context enrollID that has already been registered against the selected peer. \r\nIf left `null` the SDK will use a known enrollID for the selected peer. (this is only relevant in a permissioned network)\r\n\r\nOptions: \r\n- save_path = save the [Chaincode Summary File](#ccsf) to 'save_path'. \r\n- delay_ms = time in milliseconds to postpone the callback after deploy. Default is `40000`\r\n\r\nEx:\r\n\r\n```js\r\n\tchaincode.deploy('init', ['99'], {delay_ms: 60000}, cb_deployed);\r\n```\r\n\r\n### chaincode.query.CUSTOM_FUNCTION_NAME(args, [enrollID], [callback])\r\nWill invoke your Go function CUSTOM_FUNCTION_NAME and pass it `args`. \r\nUsually `args` is an array of strings.\r\nThe `enrollID` parameter should be the desired secure context enrollID that has already been registered against the selected peer. \r\nIf left `null` the SDK will use a known enrollID for the selected peer. (this is only relevant in a permissioned network)\r\n\r\nEx:\r\n\r\n```js\r\n\tchaincode.query.read(['abc'], function(err, data){\r\n\t\tconsole.log('read abc:', data, err);\r\n\t});\r\n```\r\n\r\n### chaincode.invoke.CUSTOM_FUNCTION_NAME(args, [enrollID], [callback])\r\nWill query your Go function CUSTOM_FUNCTION_NAME and pass it `args`. \r\nUsually `args` is an array of strings.\r\nThe `enrollID` parameter should be the desired secure context enrollID that has already been registered against the selected peer. \r\nIf left `null` the SDK will use a known enrollID for the selected peer. (this is only relevant in a permissioned network)\r\n\r\nEx:\r\n\r\n```js\r\n\tchaincode.invoke.init_marbles([args], function(err, data){\r\n\t\tconsole.log('create marble response:', data, err);\r\n\t});\r\n```\r\n\r\n### chaincode.query.read(name, [enrollID], [callback]) *depreciated 4/1/2016*\r\n*This function is only here to help people transition from ibc v0.0.x to v1.x.x.*\r\n*You should create your own read() function in your chaincode which will overwrite this prebuilt one.*\r\n*This function will put the `name` argument into `args[0]` and set `function` to `query`.*\r\n*These are passed to the chaincode function `Query(stub *shim.ChaincodeStub, function string, args []string)`.*\r\n\r\nRead variable named name from chaincode state. \r\nThis will call the `Query()` function in the Go chaincode. \r\nThe `enrollID` parameter should be the desired secure context enrollID that has already been registered against the selected peer. \r\nIf left `null` the SDK will use a known enrollID for the selected peer. (this is only relevant in a permissioned network)\r\n\r\n***\r\n***\r\n\r\n##<a name=\"formats\"></a>Formats\r\n### Chaincode Object\r\nThis is the main guy.\r\nIt is returned in the callback to load_chaincode() and contains all your cc functions + some of the setup/input data.\r\n\r\n```js\r\n\tchaincode = \r\n\t\t{\r\n\t\t\tquery: {\r\n\t\t\t\tCUSTOM_FUNCTION_NAME1: function(args, cb){etc...};\t//call chaincode function and pass it args\r\n\t\t\t\tCUSTOM_FUNCTION_NAME2: function(args, cb){etc...};\r\n\t\t\t\t^^ etc...\r\n\t\t\t}\r\n\t\t\tinvoke: {\r\n\t\t\t\tCUSTOM_FUNCTION_NAME1: function(args, cb){etc...};\t//call chaincode function and pass it args\r\n\t\t\t\tCUSTOM_FUNCTION_NAME2: function(args, cb){etc...};\r\n\t\t\t\t^^ etc...\r\n\t\t\t}\r\n\t\t\tdeploy: function(func, args, path, cb),     //deploy loaded chaincode\r\n\t\t\tdetails:{                                   //input options get stored here, sometimes its handy\r\n\t\t\t\t\t\tdeployed_name: '',              //hash of deployed chaincode\r\n\t\t\t\t\t\tfunc: {\r\n\t\t\t\t\t\t\tinvoke: [],                 //array of function names found\r\n\t\t\t\t\t\t\tquery: []                   //array of function names found\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tgit_url: '',\r\n\t\t\t\t\t\tpeers: [],                      //peer list provided in network()\r\n\t\t\t\t\t\ttimestamp: 0,                   //utc unix timestamp in ms of parsing\r\n\t\t\t\t\t\tusers: [],                      //users provided in load()\r\n\t\t\t\t\t\tunzip_dir: '',\r\n\t\t\t\t\t\tzip_url: '',\r\n\t\t\t}\r\n\t\t};\r\n```\r\n\r\n### Error Format\r\n\r\n```js\r\n\t{\r\n\t\tname: \"input error\",\r\n\t\tcode: 400,\r\n\t\tdetails: {msg: \"did not provide git_url\"}\r\n\t};\r\n```\r\n\t\r\n### <a name=\"ccsf\"></a>Chaincode Summary File\r\nThis file is used internally. \r\nIt is created in ibc.load_chaincode() and updated with chaincode.deploy(). \r\nA copy can be saved elsewhere with ibc.save(path). \r\nI found it handy in niche cases, but it will probably be unhelpful to most developers. \r\n\r\n```js\r\n\t{\r\n\t\"details\": {\r\n\t\t\"deployed_name\": \"f6c084c42b3bde90c03f214ac6e0426e3e594807901fb1464287f2c3a18ade717bc495298958287594f81bb0d0cfdd3b4346d438d3b587d4fc73cf78ae8f7dfe\",\r\n\t\t\"func\": {\r\n\t\t\t\t\t\"invoke\": [\"init\", \"delete\", \"write\", \"init_marble\", \"set_user\", \"open_trade\", \"perform_trade\"],\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"query\": []\r\n\t\t\t\t},\r\n\t\t\"git_url\": 'https://github.com/ibm-blockchain/marbles-chaincode/part2_v1.0.0'\r\n\t\t\"peers\": [{\r\n\t\t\t\"name\": \"vp1-xxx.xxx.xxx.xxx\",\r\n\t\t\t\"api_host\": \"xxx.xxx.xxx.xxx\",\r\n\t\t\t\"api_port\": \"xxx\",\r\n\t\t\t\"id\": \"xxxxx_vp1\",\r\n\t\t\t\"tls\": false,\r\n\t\t\t\"enrollID\": \"user1\"\r\n\t\t}],\r\n\t\t\"timestamp\": 1459779181971,\r\n\t\t\"users\": [{\r\n\t\t\t\"enrollId\": \"user_type1_xxx\",\r\n\t\t\t\"enrollSecret\": \"xxx\"\r\n\t\t}],\r\n\t\t\"unzip_dir\": 'marbles-chaincode-master/part2_v1.0.0',\r\n\t\t\"zip_url\": 'https://github.com/ibm-blockchain/marbles-chaincode/archive/master.zip',\r\n\t\t\"options\": {}\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\n\r\n#FAQ\r\n- *ibc.load() appears to ignore all of my users for secure context. Then it complains it found \"No membership users\" and never registers with a Peer!*\r\n\r\nCorrect behavior of `ibc.load()` is to remove any enrollIDs that do not contain 'type_1' in their name. \r\nThis is to conform to the OBC Peer spec of what enrollIDs a dev's app should use. \r\nIf this is not applicable for your network (ie you have a custom IBM Blockchain network) you can easily create your own version of `ibc.load()` for your needs. \r\nI would copy the code found in `ibc.load()` then modify it to fit your own needs. \r\nEverything important that `ibc.load()` calls is exposed in this module. \r\n\r\n- *Do you have any examples that use this?*\r\n\r\nYes! Head over to the [Marbles Node.js Demo](https://github.com/IBM-Blockchain/marbles)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/IBM-Blockchain/ibm-blockchain-js.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.2"
}
